{"version":3,"sources":["helpers/funcs.scss","main.css","helpers/mixins.scss","helpers/fonts.scss","helpers/clear.scss"],"names":[],"mappings":"AAAA;;;CCGC;ADyBD;;;CCrBC;ACPD;;;;;;CDcC;ACNC;EACE,uBCTyB;EDUzB,kBAAkB;EAIlB,gBCdkD;EDelD,sIACgE;ADIpE;;ACZE;EACE,uBCRyB;EDSzB,kBAAkB;EAIlB,gBCb+C;EDc/C,gIACgE;ADWpE;;AG3BA;EACE,8BAAsB;UAAtB,sBAAsB;EACtB,UAAU;EACV,SAAS;EACT,aAAa;AH8Bf;;AG3BA;EACE,uBAAuB;AH8BzB;;AG3BA;EACE,mBAAc;MAAd,kBAAc;UAAd,cAAc;AH8BhB;;AG3BA;EACE,oBJCoD;EIApD,uBJAoD;AC8BtD;;AG3BA;EACE,qBAAqB;EACrB,WAAW;EACX,cAAc;AH8BhB;;AG3BA;EACE,WAAW;EACX,YAAY;EACZ,oBAAiB;KAAjB,iBAAiB;AH8BnB;;AG3BA;EACE,qBAAqB;EACrB,4CAAoC;EAApC,uCAAoC;EAApC,oCAAoC;AH8BtC;;AGhCA;EAKI,YAAY;AH+BhB;;AG3BA;EACE,eAAe;EACf,aAAa;EACb,YAAY;EACZ,6BAA6B;AH8B/B;;AGlCA;EAOI,aAAa;AH+BjB;;AG3BA;EACE,oBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,yBAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,gBAAgB;AH8BlB;;AG3BA;EACE,cAAc;EACd,aAAa;AH8Bf;;AGhCA;EAKI,YAAY;AH+BhB;;AGpCA;EAKI,YAAY;AH+BhB;;AGpCA;EAKI,YAAY;AH+BhB;;AGpCA;EAKI,YAAY;AH+BhB;;AGpCA;EAKI,YAAY;AH+BhB;;AG3BA;EACE,mBAAc;MAAd,kBAAc;UAAd,cAAc;AH8BhB;;AG3BA;EACE,wDAAkE;AH8BpE;;AG1BE;EACE,eAAe;EACf,aAAa;EACb,WAAW;AH6Bf;;AG1BE;EACE,wBAAgB;EAAhB,gBAAgB;AH6BpB;;AGzBA;EACE,oBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,4BAAsB;EAAtB,6BAAsB;MAAtB,0BAAsB;UAAtB,sBAAsB;EACtB,yBAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,yBAA8B;MAA9B,sBAA8B;UAA9B,8BAA8B;EAC9B,uBJ3EoD;EI4EpD,sBJ5EoD;EI6EpD,WAAW;EACX,kBJ9EoD;EI+EpD,kBAAkB;EAClB,iBAAiB;AH4BnB;;AG1BE;EACE,8BAAmB;EAAnB,6BAAmB;MAAnB,uBAAmB;UAAnB,mBAAmB;AH6BvB","file":"styles.css","sourcesContent":["/*\r\n  --- Generates em sizes by px ---\r\n  $args... - includes count of size with or not with a type of size (example: 16px, 16)\r\n*/\r\n@function strip-units($unit) {\r\n  @return $unit / ($unit * 0 + 1);\r\n}\r\n\r\n@function em($args...) {\r\n  $context: strip-units(nth($args, length($args)));\r\n  $result: ();\r\n  $separator: list_separator($args);\r\n\r\n  @for $i from 1 through length($args) - 1 {\r\n    $value: nth($args, $i);\r\n    @if type-of($value) == 'number' {\r\n      $value: strip-units($value);\r\n      $result: append($result, $value / $context * 1em, $separator);\r\n    } @else if type-of($value) == 'list' {\r\n      $result: append($result, em(append($value, $context)...), $separator);\r\n    } @else {\r\n      $result: append($result, $value, $separator);\r\n    }\r\n  }\r\n\r\n  @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n/*\r\n  --- Generates a color by template colors ---\r\n  $name - includes a name for color (example: secondary, theme)\r\n*/\r\n@function color($name) {\r\n  @if map-has-key($colors, $name) {\r\n    @return map-get($colors, $name);\r\n  }\r\n\r\n  @return null;\r\n}\r\n","/*\r\n  --- Generates em sizes by px ---\r\n  $args... - includes count of size with or not with a type of size (example: 16px, 16)\r\n*/\n/*\r\n  --- Generates a color by template colors ---\r\n  $name - includes a name for color (example: secondary, theme)\r\n*/\n/*\r\n  --- Generates url to local fonts ---\r\n  $fontName - name by font, which uses in property \"font-family\" (example: 'Arial', 'Roboto')\r\n  $fileName - name by font's file to include in website (example: 'ArialRegular', 'ArialBold')\r\n  $fontWeight - count for font's weight, which uses in property \"font-weight\" (example: 700, 300, 100)\r\n  $fontStyle - it's a boolean type which includes values \"true\" or \"false\" - adds a property \"font-style: italic\" if it's true\r\n*/\n@font-face {\n  font-family: \"FiraSans\";\n  font-display: swap;\n  font-weight: 400;\n  src: url(\"../fonts/FiraSans/FiraSans-Regular.woff2\") format(\"woff2\"), url(\"../fonts/FiraSans/FiraSans-Regular.ttf\") format(\"truetype\");\n}\n\n@font-face {\n  font-family: \"FiraSans\";\n  font-display: swap;\n  font-weight: 700;\n  src: url(\"../fonts/FiraSans/FiraSans-Bold.woff2\") format(\"woff2\"), url(\"../fonts/FiraSans/FiraSans-Bold.ttf\") format(\"truetype\");\n}\n\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n  font: inherit;\n}\n\nhtml {\n  scroll-behavior: smooth;\n}\n\nmain {\n  flex: 1 0 auto;\n}\n\nsection {\n  padding-top: 5.625em;\n  padding-bottom: 5.625em;\n}\n\npicture {\n  display: inline-block;\n  width: 100%;\n  line-height: 0;\n}\n\nimg {\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n}\n\na {\n  text-decoration: none;\n  transition: opacity 0.3s ease-in-out;\n}\n\na:hover {\n  opacity: 0.6;\n}\n\nbutton {\n  cursor: pointer;\n  outline: none;\n  border: none;\n  background-color: transparent;\n}\n\nbutton:focus {\n  outline: none;\n}\n\nul {\n  display: flex;\n  align-items: center;\n  list-style: none;\n}\n\ninput {\n  outline: unset;\n  border: unset;\n}\n\ninput::placeholder {\n  opacity: 0.6;\n}\n\nfooter {\n  flex: 0 0 auto;\n}\n\nbody {\n  font: 16px/1.5 \"FiraSans\", \"Arial\", \"Roboto\", sans-serif;\n}\n\n.header--is-fixed {\n  position: fixed;\n  z-index: 1000;\n  width: 100%;\n}\n\n.header--is-sticky {\n  position: sticky;\n}\n\n.u-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  padding-right: 0.9375em;\n  padding-left: 0.9375em;\n  width: 100%;\n  max-width: 71.25em;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.u-wrapper--is-row {\n  flex-direction: row;\n}\n","/*\r\n  --- Generates url to local fonts ---\r\n  $fontName - name by font, which uses in property \"font-family\" (example: 'Arial', 'Roboto')\r\n  $fileName - name by font's file to include in website (example: 'ArialRegular', 'ArialBold')\r\n  $fontWeight - count for font's weight, which uses in property \"font-weight\" (example: 700, 300, 100)\r\n  $fontStyle - it's a boolean type which includes values \"true\" or \"false\" - adds a property \"font-style: italic\" if it's true\r\n*/\r\n@mixin setFamily($fontName, $fileName, $fontWeight, $fontStyle: false) {\r\n  @font-face {\r\n    font-family: $fontName;\r\n    font-display: swap;\r\n    @if $fontStyle {\r\n      font-style: italic;\r\n    }\r\n    font-weight: $fontWeight;\r\n    src: url('../fonts/#{$fontName}/#{$fileName}.woff2') format('woff2'),\r\n    url('../fonts/#{$fontName}/#{$fileName}.ttf') format('truetype');\r\n  }\r\n}\r\n\r\n@mixin vw($size) {\r\n  $breakpoints: (\r\n      'FullHD': 1920px,\r\n  );\r\n\r\n  $vw-content: (map_get($breakpoints, 'FullHD') * 0.01) * 1px;\r\n  font-size: ($size/$vw-content) * 1vw;\r\n\r\n  @include media('>FullHD') {\r\n    font-size: $size;\r\n  }\r\n}\r\n","@include setFamily('FiraSans', 'FiraSans-Regular', 400);\r\n@include setFamily('FiraSans', 'FiraSans-Bold', 700);\r\n","* {\r\n  box-sizing: border-box;\r\n  padding: 0;\r\n  margin: 0;\r\n  font: inherit;\r\n}\r\n\r\nhtml {\r\n  scroll-behavior: smooth;\r\n}\r\n\r\nmain {\r\n  flex: 1 0 auto;\r\n}\r\n\r\nsection {\r\n  padding-top: em(90, $fz);\r\n  padding-bottom: em(90, $fz);\r\n}\r\n\r\npicture {\r\n  display: inline-block;\r\n  width: 100%;\r\n  line-height: 0;\r\n}\r\n\r\nimg {\r\n  width: 100%;\r\n  height: auto;\r\n  object-fit: cover;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  transition: opacity 0.3s ease-in-out;\r\n\r\n  &:hover {\r\n    opacity: 0.6;\r\n  }\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: none;\r\n  background-color: transparent;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n}\r\n\r\nul {\r\n  display: flex;\r\n  align-items: center;\r\n  list-style: none;\r\n}\r\n\r\ninput {\r\n  outline: unset;\r\n  border: unset;\r\n\r\n  &::placeholder {\r\n    opacity: 0.6;\r\n  }\r\n}\r\n\r\nfooter {\r\n  flex: 0 0 auto;\r\n}\r\n\r\nbody {\r\n  font: #{$fz_base}px/1.5 '#{$font}','Arial', 'Roboto', sans-serif;\r\n}\r\n\r\n.header {\r\n  &--is-fixed {\r\n    position: fixed;\r\n    z-index: 1000;\r\n    width: 100%;\r\n  }\r\n\r\n  &--is-sticky {\r\n    position: sticky;\r\n  }\r\n}\r\n\r\n.u-wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding-right: em(15, $fz);\r\n  padding-left: em(15, $fz);\r\n  width: 100%;\r\n  max-width: em(1140, $fz);\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n\r\n  &--is-row {\r\n    flex-direction: row;\r\n  }\r\n}\r\n"]}